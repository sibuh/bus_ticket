// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: events.sql

package db

import (
	"context"
	"time"
)

const addEvent = `-- name: AddEvent :one
INSERT INTO events (title,description,user_id,start_date,end_date,price) VALUES ($1,$2,$3,$4,$5,$6)
RETURNING id, title, description, user_id, start_date, end_date, price, created_at, updated_at, deleted_at
`

type AddEventParams struct {
	Title       string
	Description string
	UserID      int32
	StartDate   time.Time
	EndDate     time.Time
	Price       float64
}

func (q *Queries) AddEvent(ctx context.Context, arg AddEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, addEvent,
		arg.Title,
		arg.Description,
		arg.UserID,
		arg.StartDate,
		arg.EndDate,
		arg.Price,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.UserID,
		&i.StartDate,
		&i.EndDate,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const fetchEvent = `-- name: FetchEvent :one
SELECT id, title, description, user_id, start_date, end_date, price, created_at, updated_at, deleted_at FROM events where id=$1
`

func (q *Queries) FetchEvent(ctx context.Context, id int32) (Event, error) {
	row := q.db.QueryRow(ctx, fetchEvent, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.UserID,
		&i.StartDate,
		&i.EndDate,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const fetchEvents = `-- name: FetchEvents :many
SELECT id, title, description, user_id, start_date, end_date, price, created_at, updated_at, deleted_at FROM events
`

func (q *Queries) FetchEvents(ctx context.Context) ([]Event, error) {
	rows, err := q.db.Query(ctx, fetchEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.UserID,
			&i.StartDate,
			&i.EndDate,
			&i.Price,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
