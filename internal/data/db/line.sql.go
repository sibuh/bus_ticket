// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: line.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgtype"
)

const createLine = `-- name: CreateLine :one
INSERT INTO lines (destination, departure, price, schedule)
VALUES ($1, $2, $3, $4)
RETURNING id, destination, departure, price, schedule, created_at, update_at
`

type CreateLineParams struct {
	Destination string
	Departure   string
	Price       float64
	Schedule    pgtype.JSONB
}

func (q *Queries) CreateLine(ctx context.Context, arg CreateLineParams) (Line, error) {
	row := q.db.QueryRow(ctx, createLine,
		arg.Destination,
		arg.Departure,
		arg.Price,
		arg.Schedule,
	)
	var i Line
	err := row.Scan(
		&i.ID,
		&i.Destination,
		&i.Departure,
		&i.Price,
		&i.Schedule,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const createTrip = `-- name: CreateTrip :one
INSERT INTO line_trips (line, date)
VALUES ($1, $2)
RETURNING id, line, date, created_at, update_at
`

type CreateTripParams struct {
	Line uuid.UUID
	Date time.Time
}

func (q *Queries) CreateTrip(ctx context.Context, arg CreateTripParams) (LineTrip, error) {
	row := q.db.QueryRow(ctx, createTrip, arg.Line, arg.Date)
	var i LineTrip
	err := row.Scan(
		&i.ID,
		&i.Line,
		&i.Date,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const getLine = `-- name: GetLine :one
SELECT id, destination, departure, price, schedule, created_at, update_at
from lines
WHERE id = $1
`

func (q *Queries) GetLine(ctx context.Context, id uuid.UUID) (Line, error) {
	row := q.db.QueryRow(ctx, getLine, id)
	var i Line
	err := row.Scan(
		&i.ID,
		&i.Destination,
		&i.Departure,
		&i.Price,
		&i.Schedule,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}

const updateLine = `-- name: UpdateLine :one
UPDATE lines
SET price = $2,
    schedule = $3
WHERE id = $1
RETURNING id, destination, departure, price, schedule, created_at, update_at
`

type UpdateLineParams struct {
	ID       uuid.UUID
	Price    float64
	Schedule pgtype.JSONB
}

func (q *Queries) UpdateLine(ctx context.Context, arg UpdateLineParams) (Line, error) {
	row := q.db.QueryRow(ctx, updateLine, arg.ID, arg.Price, arg.Schedule)
	var i Line
	err := row.Scan(
		&i.ID,
		&i.Destination,
		&i.Departure,
		&i.Price,
		&i.Schedule,
		&i.CreatedAt,
		&i.UpdateAt,
	)
	return i, err
}
